def f(s, step):
    if s >= 41:
        return step % 2 == 0
    if step == 0:
        return False
    calls = [f(s + 1, step - 1), f(s + 2, step - 1)]
    if s * 2 <= 50:
        calls.append(f(s * 2, step - 1))
    if (step - 1) % 2 == 0:
        return any(calls)
    return all(calls)


def f1(s, step):
    if s >= 41:
        return step % 2 == 0
    if step == 0:
        return False
    calls = [f1(s + 1, step - 1), f1(s + 2, step - 1)]
    if s * 2 <= 50:
        calls.append(f1(s * 2, step - 1))
    if (step - 1) % 2 == 0:
        if step == 3:
            return sum(calls) == 2
        return any(calls)
    return all(calls)

''' Укажите такое значение S, при котором у Вани есть выигрышная стратегия, 
позволяющая ему выиграть вторым ходом при любой игре Пети, 
но у Вани нет стратегии, которая позволяла бы ему гарантированно выиграть первым ходом.'''
for s in range(1, 41):
    if f(s, 4) and not f(s, 2):
        print(f'19) {s}')
'''Укажите два значения S, при которых у Вани есть выигрышная стратегия, 
позволяющая ему выиграть третьим ходом при любой игре Пети, но у Вани нет стратегии, 
которая позволяла бы ему гарантированно выиграть первым или вторым ходом.'''
for s in range(1, 41):
    if f(s, 6) and not f(s, 2) and not f(s, 4):
        print(f'20) {s}')
'''Найдите такое значение S, при котором у Пети нет стратегии, позволяющей ему гарантированно выиграть первым ходом, 
но у Пети есть выигрышная стратегия, позволяющая ему выиграть вторым ходом при любой игре Вани, 
и при этом у Пети есть два разных первых хода, обеспечивающих выигрыш вторым ходом.'''
for s in range(1, 41):
    if not f(s, 1) and f1(s, 3):
        print(f'21) {s}')
